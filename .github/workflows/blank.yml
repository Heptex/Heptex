name: Extract and Upload Firmware Blobs

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main # Replace with your target branch

jobs:
  extract-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install required tools
      - name: Install Required Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip simg2img mount tar curl jq

      # Step 3: Unzip the firmware file
      - name: Unzip Firmware
        run: |
          mkdir -p firmware
          unzip firmware.zip -d firmware

      # Step 4: Process partition images
      - name: Extract Blobs from Partition Images
        run: |
          mkdir -p mount_points blobs
          
          # List all images in the firmware directory
          for img in firmware/*.img; do
            echo "Processing $img"
            
            # Convert sparse images to raw if needed
            if file "$img" | grep -q "sparse"; then
              raw_img="mount_points/$(basename "$img" .img).raw"
              simg2img "$img" "$raw_img"
            else
              raw_img="$img"
            fi

            # Mount the raw image
            mkdir -p mount_points/$(basename "$raw_img" .img)
            sudo mount -o loop "$raw_img" mount_points/$(basename "$raw_img" .img)

            # Copy blobs
            cp -r mount_points/$(basename "$raw_img" .img)/path_to_blobs/* blobs/ || true
            
            # Unmount and clean up
            sudo umount mount_points/$(basename "$raw_img" .img)
            rm -rf mount_points/$(basename "$raw_img" .img)
          done

      # Step 5: Archive the extracted blobs
      - name: Archive Extracted Blobs
        run: |
          tar -czvf blobs.tar.gz blobs

      # Step 6: Upload to GoFile
      - name: Upload to GoFile
        run: |
          API_KEY="c2893086-ada6-4062-a3f6-ed5ab1d8de8e"
          response=$(curl -s -X POST "https://api.gofile.io/getServer")
          server=$(echo "$response" | jq -r '.data.server')

          upload_response=$(curl -s -X POST "https://$server.gofile.io/uploadFile" \
            -F "file=@blobs.tar.gz" \
            -F "token=$API_KEY")

          echo "Upload Response: $upload_response"
